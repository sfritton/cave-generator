{"mappings":"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","sources":["src/scripts/wave-function-collapse/index.ts","src/scripts/wave-function-collapse/Tile.ts","src/scripts/wave-function-collapse/WaveFunctionCollapse.ts","src/scripts/wave-function-collapse/Cell.ts"],"sourcesContent":["import { Cell } from './Cell';\nimport { CAVE_TILES, SocketTileName } from './Tile';\nimport { WaveFunctionCollapse } from './WaveFunctionCollapse';\n\nconst CANVAS_WIDTH = 1024;\nconst CANVAS_HEIGHT = 768;\nconst CELL_SIZE = 32;\nconst ROWS = Math.floor(CANVAS_WIDTH / CELL_SIZE);\nconst COLUMNS = Math.floor(CANVAS_HEIGHT / CELL_SIZE);\nconst GRAYS = Object.keys(CAVE_TILES).map((_, i) => {\n  const brightness = 255 - i * 10;\n\n  return `rgb(${brightness} ${brightness} ${brightness})`;\n});\n\nconst canvas = document.querySelector<HTMLCanvasElement>('canvas.wfc');\nconst context = canvas?.getContext('2d');\n\nconst image_bottom = document.getElementById('bottom');\nconst image_bottom_left = document.getElementById('bottom_left');\nconst image_bottom_right = document.getElementById('bottom_right');\nconst image_floor = document.getElementById('floor');\nconst image_left = document.getElementById('left');\nconst image_right = document.getElementById('right');\nconst image_top = document.getElementById('top');\nconst image_top_left = document.getElementById('top_left');\nconst image_top_right = document.getElementById('top_right');\nconst image_wall = document.getElementById('wall');\nconst image_wall_two = document.getElementById('wall_two');\nconst image_pillar_top_left = document.getElementById('pillar_top_left');\nconst image_pillar_top_right = document.getElementById('pillar_top_right');\nconst image_pillar_bottom_left = document.getElementById('pillar_bottom_left');\nconst image_pillar_bottom_right = document.getElementById('pillar_bottom_right');\nconst image_ledge_top_left = document.getElementById('ledge_top_left');\nconst image_ledge_top = document.getElementById('ledge_top');\nconst image_ledge_top_right = document.getElementById('ledge_top_right');\nconst image_ledge_pillar_bottom_left = document.getElementById('ledge_pillar_bottom_left');\nconst image_ledge_pillar_bottom_right = document.getElementById('ledge_pillar_bottom_right');\nconst image_ledge_pillar_top_left = document.getElementById('ledge_pillar_top_left');\nconst image_ledge_pillar_top_right = document.getElementById('ledge_pillar_top_right');\nconst image_ledge_left = document.getElementById('ledge_left');\nconst image_ledge_right = document.getElementById('ledge_right');\nconst image_ledge_bottom_left = document.getElementById('ledge_bottom_left');\nconst image_ledge_bottom = document.getElementById('ledge_bottom');\nconst image_ledge_bottom_right = document.getElementById('ledge_bottom_right');\nconst image_ledge_left_ramp_top = document.getElementById('ledge_left_ramp_top');\nconst image_ledge_right_ramp_top = document.getElementById('ledge_right_ramp_top');\nconst image_ledge_top_ramp_left = document.getElementById('ledge_top_ramp_left');\nconst image_ledge_top_ramp_right = document.getElementById('ledge_top_ramp_right');\nconst image_ledge_bottom_ramp_left = document.getElementById('ledge_bottom_ramp_left');\nconst image_ledge_bottom_ramp_right = document.getElementById('ledge_bottom_ramp_right');\nconst image_ledge_left_ramp_bottom = document.getElementById('ledge_left_ramp_bottom');\nconst image_ledge_right_ramp_bottom = document.getElementById('ledge_right_ramp_bottom');\n\nconst FILL_STYLES: Record<SocketTileName, HTMLElement | null> = {\n  BOTTOM: image_bottom,\n  BOTTOM_LEFT: image_bottom_left,\n  BOTTOM_RIGHT: image_bottom_right,\n  FLOOR: image_floor,\n  LEFT: image_left,\n  RIGHT: image_right,\n  TOP: image_top,\n  TOP_LEFT: image_top_left,\n  TOP_RIGHT: image_top_right,\n  WALL: image_wall,\n  WALL_TWO: image_wall_two,\n  PILLAR_TOP_LEFT: image_pillar_top_left,\n  PILLAR_TOP_RIGHT: image_pillar_top_right,\n  PILLAR_BOTTOM_LEFT: image_pillar_bottom_left,\n  PILLAR_BOTTOM_RIGHT: image_pillar_bottom_right,\n  LEDGE_BOTTOM: image_ledge_bottom,\n  LEDGE_BOTTOM_LEFT: image_ledge_bottom_left,\n  LEDGE_BOTTOM_RIGHT: image_ledge_bottom_right,\n  LEDGE_LEFT: image_ledge_left,\n  LEDGE_RIGHT: image_ledge_right,\n  LEDGE_TOP: image_ledge_top,\n  LEDGE_TOP_LEFT: image_ledge_top_left,\n  LEDGE_TOP_RIGHT: image_ledge_top_right,\n  LEDGE_PILLAR_TOP_LEFT: image_ledge_pillar_top_left,\n  LEDGE_PILLAR_TOP_RIGHT: image_ledge_pillar_top_right,\n  LEDGE_PILLAR_BOTTOM_LEFT: image_ledge_pillar_bottom_left,\n  LEDGE_PILLAR_BOTTOM_RIGHT: image_ledge_pillar_bottom_right,\n  LEDGE_LEFT_RAMP_TOP: image_ledge_left_ramp_top,\n  LEDGE_RIGHT_RAMP_TOP: image_ledge_right_ramp_top,\n  LEDGE_TOP_RAMP_LEFT: image_ledge_top_ramp_left,\n  LEDGE_TOP_RAMP_RIGHT: image_ledge_top_ramp_right,\n  LEDGE_BOTTOM_RAMP_LEFT: image_ledge_bottom_ramp_left,\n  LEDGE_BOTTOM_RAMP_RIGHT: image_ledge_bottom_ramp_right,\n  LEDGE_LEFT_RAMP_BOTTOM: image_ledge_left_ramp_bottom,\n  LEDGE_RIGHT_RAMP_BOTTOM: image_ledge_right_ramp_bottom,\n};\n\nconst drawCell = (cell: Cell) => {\n  if (!context) return;\n  const x = cell.x * CELL_SIZE;\n  const y = cell.y * CELL_SIZE;\n\n  if (cell.isCollapsed) {\n    const image = FILL_STYLES[CAVE_TILES[cell.domain[0]].name];\n    context.drawImage(image, x, y, CELL_SIZE, CELL_SIZE);\n    return;\n  }\n\n  context.fillStyle = GRAYS[cell.domain.length - 1];\n  context.fillRect(x, y, CELL_SIZE, CELL_SIZE);\n\n  context.fillStyle = '#000';\n  // context.fillText(`${cell.domain.length}`, x + CELL_SIZE / 2, y + CELL_SIZE / 2);\n};\n\nconst drawGrid = (cells: Cell[]) => {\n  if (!context) return;\n  context.textAlign = 'center';\n  context.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n  cells.forEach((cell) => drawCell(cell));\n};\n\nconst wfc = new WaveFunctionCollapse(drawGrid, ROWS, COLUMNS);\n\nwfc.run(true);\n","export type TileName = 'FOREST' | 'GRASS' | 'BEACH' | 'WATER' | 'DEEP_WATER';\n\nexport interface Tile {\n  name: TileName;\n  weight: number;\n  color: string;\n  validNeighbors: TileName[];\n}\n\nexport const TILES: Record<TileName, Tile> = {\n  FOREST: {\n    name: 'FOREST',\n    color: '#227700',\n    weight: 3,\n    validNeighbors: ['FOREST', 'GRASS'],\n  },\n  GRASS: {\n    name: 'GRASS',\n    color: '#88aa22',\n    weight: 4,\n    validNeighbors: ['FOREST', 'GRASS', 'BEACH'],\n  },\n  BEACH: {\n    name: 'BEACH',\n    color: '#ddcc88',\n    weight: 4,\n    validNeighbors: ['GRASS', 'BEACH', 'WATER'],\n  },\n  WATER: {\n    name: 'WATER',\n    color: '#8888ff',\n    weight: 1,\n    validNeighbors: ['BEACH', 'WATER', 'DEEP_WATER'],\n  },\n  DEEP_WATER: {\n    name: 'DEEP_WATER',\n    color: '#4466cc',\n    weight: 3,\n    validNeighbors: ['WATER', 'DEEP_WATER'],\n  },\n};\n\nexport type SocketTileName =\n  | 'FLOOR'\n  | 'WALL'\n  | 'WALL_TWO'\n  | 'TOP_LEFT'\n  | 'TOP'\n  | 'TOP_RIGHT'\n  | 'RIGHT'\n  | 'BOTTOM_RIGHT'\n  | 'BOTTOM'\n  | 'BOTTOM_LEFT'\n  | 'LEFT'\n  | 'PILLAR_TOP_LEFT'\n  | 'PILLAR_TOP_RIGHT'\n  | 'PILLAR_BOTTOM_LEFT'\n  | 'PILLAR_BOTTOM_RIGHT'\n  | 'LEDGE_TOP_LEFT'\n  | 'LEDGE_TOP'\n  | 'LEDGE_TOP_RIGHT'\n  | 'LEDGE_RIGHT'\n  | 'LEDGE_BOTTOM_RIGHT'\n  | 'LEDGE_BOTTOM'\n  | 'LEDGE_BOTTOM_LEFT'\n  | 'LEDGE_LEFT'\n  | 'LEDGE_PILLAR_TOP_LEFT'\n  | 'LEDGE_PILLAR_TOP_RIGHT'\n  | 'LEDGE_PILLAR_BOTTOM_LEFT'\n  | 'LEDGE_PILLAR_BOTTOM_RIGHT'\n  | 'LEDGE_LEFT_RAMP_TOP'\n  | 'LEDGE_RIGHT_RAMP_TOP'\n  | 'LEDGE_TOP_RAMP_LEFT'\n  | 'LEDGE_TOP_RAMP_RIGHT'\n  | 'LEDGE_BOTTOM_RAMP_LEFT'\n  | 'LEDGE_BOTTOM_RAMP_RIGHT'\n  | 'LEDGE_LEFT_RAMP_BOTTOM'\n  | 'LEDGE_RIGHT_RAMP_BOTTOM';\n\nexport type SocketNameVertical =\n  | 'WALL'\n  | 'FLOOR'\n  | 'WALL_BOTTOM'\n  | 'WALL_TOP'\n  | 'LEDGE_BOTTOM'\n  | 'LEDGE_TOP';\nexport type SocketNameHorizontal =\n  | 'WALL'\n  | 'FLOOR'\n  | 'WALL_LEFT'\n  | 'WALL_RIGHT'\n  | 'LEDGE_LEFT'\n  | 'LEDGE_RIGHT';\nexport interface SocketTile {\n  name: SocketTileName;\n  weight: number;\n  sockets: {\n    top: SocketNameHorizontal;\n    bottom: SocketNameHorizontal;\n    left: SocketNameVertical;\n    right: SocketNameVertical;\n  };\n}\n\nexport const CAVE_TILES: Record<SocketTileName, SocketTile> = {\n  TOP_LEFT: {\n    name: 'TOP_LEFT',\n    weight: 1,\n    sockets: {\n      top: 'WALL',\n      bottom: 'WALL_LEFT',\n      left: 'WALL',\n      right: 'WALL_TOP',\n    },\n  },\n  TOP: {\n    name: 'TOP',\n    weight: 1,\n    sockets: {\n      top: 'WALL',\n      bottom: 'FLOOR',\n      left: 'WALL_TOP',\n      right: 'WALL_TOP',\n    },\n  },\n  TOP_RIGHT: {\n    name: 'TOP_RIGHT',\n    weight: 1,\n    sockets: {\n      top: 'WALL',\n      bottom: 'WALL_RIGHT',\n      left: 'WALL_TOP',\n      right: 'WALL',\n    },\n  },\n  LEFT: {\n    name: 'LEFT',\n    weight: 1,\n    sockets: {\n      top: 'WALL_LEFT',\n      bottom: 'WALL_LEFT',\n      left: 'WALL',\n      right: 'FLOOR',\n    },\n  },\n  FLOOR: {\n    name: 'FLOOR',\n    weight: 20,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'FLOOR',\n      left: 'FLOOR',\n      right: 'FLOOR',\n    },\n  },\n  RIGHT: {\n    name: 'RIGHT',\n    weight: 1,\n    sockets: {\n      top: 'WALL_RIGHT',\n      bottom: 'WALL_RIGHT',\n      left: 'FLOOR',\n      right: 'WALL',\n    },\n  },\n  BOTTOM_LEFT: {\n    name: 'BOTTOM_LEFT',\n    weight: 1,\n    sockets: {\n      top: 'WALL_LEFT',\n      bottom: 'WALL',\n      left: 'WALL',\n      right: 'WALL_BOTTOM',\n    },\n  },\n  BOTTOM: {\n    name: 'BOTTOM',\n    weight: 1,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'WALL',\n      left: 'WALL_BOTTOM',\n      right: 'WALL_BOTTOM',\n    },\n  },\n  BOTTOM_RIGHT: {\n    name: 'BOTTOM_RIGHT',\n    weight: 1,\n    sockets: {\n      top: 'WALL_RIGHT',\n      bottom: 'WALL',\n      left: 'WALL_BOTTOM',\n      right: 'WALL',\n    },\n  },\n  WALL: {\n    name: 'WALL',\n    weight: 4,\n    sockets: {\n      top: 'WALL',\n      bottom: 'WALL',\n      left: 'WALL',\n      right: 'WALL',\n    },\n  },\n  WALL_TWO: {\n    name: 'WALL_TWO',\n    weight: 1,\n    sockets: {\n      top: 'WALL',\n      bottom: 'WALL',\n      left: 'WALL',\n      right: 'WALL',\n    },\n  },\n  PILLAR_BOTTOM_LEFT: {\n    name: 'PILLAR_BOTTOM_LEFT',\n    weight: 1,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'WALL_LEFT',\n      left: 'WALL_BOTTOM',\n      right: 'FLOOR',\n    },\n  },\n  PILLAR_BOTTOM_RIGHT: {\n    name: 'PILLAR_BOTTOM_RIGHT',\n    weight: 1,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'WALL_RIGHT',\n      left: 'FLOOR',\n      right: 'WALL_BOTTOM',\n    },\n  },\n  PILLAR_TOP_LEFT: {\n    name: 'PILLAR_TOP_LEFT',\n    weight: 1,\n    sockets: {\n      top: 'WALL_LEFT',\n      bottom: 'FLOOR',\n      left: 'WALL_TOP',\n      right: 'FLOOR',\n    },\n  },\n  PILLAR_TOP_RIGHT: {\n    name: 'PILLAR_TOP_RIGHT',\n    weight: 1,\n    sockets: {\n      top: 'WALL_RIGHT',\n      bottom: 'FLOOR',\n      left: 'FLOOR',\n      right: 'WALL_TOP',\n    },\n  },\n  LEDGE_TOP_LEFT: {\n    name: 'LEDGE_TOP_LEFT',\n    weight: 1,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'LEDGE_LEFT',\n      left: 'FLOOR',\n      right: 'LEDGE_TOP',\n    },\n  },\n  LEDGE_TOP: {\n    name: 'LEDGE_TOP',\n    weight: 1,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'FLOOR',\n      left: 'LEDGE_TOP',\n      right: 'LEDGE_TOP',\n    },\n  },\n  LEDGE_TOP_RIGHT: {\n    name: 'LEDGE_TOP_RIGHT',\n    weight: 1,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'LEDGE_RIGHT',\n      left: 'LEDGE_TOP',\n      right: 'FLOOR',\n    },\n  },\n  LEDGE_LEFT: {\n    name: 'LEDGE_LEFT',\n    weight: 1,\n    sockets: {\n      top: 'LEDGE_LEFT',\n      bottom: 'LEDGE_LEFT',\n      left: 'FLOOR',\n      right: 'FLOOR',\n    },\n  },\n  LEDGE_RIGHT: {\n    name: 'LEDGE_RIGHT',\n    weight: 1,\n    sockets: {\n      top: 'LEDGE_RIGHT',\n      bottom: 'LEDGE_RIGHT',\n      left: 'FLOOR',\n      right: 'FLOOR',\n    },\n  },\n  LEDGE_BOTTOM_LEFT: {\n    name: 'LEDGE_BOTTOM_LEFT',\n    weight: 1,\n    sockets: {\n      top: 'LEDGE_LEFT',\n      bottom: 'FLOOR',\n      left: 'FLOOR',\n      right: 'LEDGE_BOTTOM',\n    },\n  },\n  LEDGE_BOTTOM: {\n    name: 'LEDGE_BOTTOM',\n    weight: 1,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'FLOOR',\n      left: 'LEDGE_BOTTOM',\n      right: 'LEDGE_BOTTOM',\n    },\n  },\n  LEDGE_BOTTOM_RIGHT: {\n    name: 'LEDGE_BOTTOM_RIGHT',\n    weight: 1,\n    sockets: {\n      top: 'LEDGE_RIGHT',\n      bottom: 'FLOOR',\n      left: 'LEDGE_BOTTOM',\n      right: 'FLOOR',\n    },\n  },\n  LEDGE_PILLAR_BOTTOM_LEFT: {\n    name: 'LEDGE_PILLAR_BOTTOM_LEFT',\n    weight: 1,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'LEDGE_LEFT',\n      left: 'LEDGE_BOTTOM',\n      right: 'FLOOR',\n    },\n  },\n  LEDGE_PILLAR_BOTTOM_RIGHT: {\n    name: 'LEDGE_PILLAR_BOTTOM_RIGHT',\n    weight: 1,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'LEDGE_RIGHT',\n      left: 'FLOOR',\n      right: 'LEDGE_BOTTOM',\n    },\n  },\n  LEDGE_PILLAR_TOP_LEFT: {\n    name: 'LEDGE_PILLAR_TOP_LEFT',\n    weight: 1,\n    sockets: {\n      top: 'LEDGE_LEFT',\n      bottom: 'FLOOR',\n      left: 'LEDGE_TOP',\n      right: 'FLOOR',\n    },\n  },\n  LEDGE_PILLAR_TOP_RIGHT: {\n    name: 'LEDGE_PILLAR_TOP_RIGHT',\n    weight: 1,\n    sockets: {\n      top: 'LEDGE_RIGHT',\n      bottom: 'FLOOR',\n      left: 'FLOOR',\n      right: 'LEDGE_TOP',\n    },\n  },\n  LEDGE_TOP_RAMP_LEFT: {\n    name: 'LEDGE_TOP_RAMP_LEFT',\n    weight: 0,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'FLOOR',\n      left: 'FLOOR',\n      right: 'LEDGE_TOP',\n    },\n  },\n  LEDGE_TOP_RAMP_RIGHT: {\n    name: 'LEDGE_TOP_RAMP_RIGHT',\n    weight: 0,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'FLOOR',\n      right: 'FLOOR',\n      left: 'LEDGE_TOP',\n    },\n  },\n  LEDGE_BOTTOM_RAMP_LEFT: {\n    name: 'LEDGE_BOTTOM_RAMP_LEFT',\n    weight: 0,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'FLOOR',\n      left: 'FLOOR',\n      right: 'LEDGE_BOTTOM',\n    },\n  },\n  LEDGE_BOTTOM_RAMP_RIGHT: {\n    name: 'LEDGE_BOTTOM_RAMP_RIGHT',\n    weight: 0,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'FLOOR',\n      right: 'FLOOR',\n      left: 'LEDGE_BOTTOM',\n    },\n  },\n  LEDGE_LEFT_RAMP_TOP: {\n    name: 'LEDGE_LEFT_RAMP_TOP',\n    weight: 0,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'LEDGE_LEFT',\n      left: 'FLOOR',\n      right: 'FLOOR',\n    },\n  },\n  LEDGE_LEFT_RAMP_BOTTOM: {\n    name: 'LEDGE_LEFT_RAMP_BOTTOM',\n    weight: 0,\n    sockets: {\n      top: 'LEDGE_LEFT',\n      bottom: 'FLOOR',\n      left: 'FLOOR',\n      right: 'FLOOR',\n    },\n  },\n  LEDGE_RIGHT_RAMP_TOP: {\n    name: 'LEDGE_RIGHT_RAMP_TOP',\n    weight: 0,\n    sockets: {\n      top: 'FLOOR',\n      bottom: 'LEDGE_RIGHT',\n      left: 'FLOOR',\n      right: 'FLOOR',\n    },\n  },\n  LEDGE_RIGHT_RAMP_BOTTOM: {\n    name: 'LEDGE_RIGHT_RAMP_BOTTOM',\n    weight: 0,\n    sockets: {\n      top: 'LEDGE_RIGHT',\n      bottom: 'FLOOR',\n      left: 'FLOOR',\n      right: 'FLOOR',\n    },\n  },\n};\n","import { Cell } from './Cell';\n\nconst ZONE_SIZE = 16;\n\nfunction shuffleArray(array: any[]) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\n/**\n * Approximate runtime:\n * - 25x25: 90ms\n * - 50x50: 380ms\n * - 100x100: 1500ms\n * - 200x200: 6000ms\n * - 400x400: 25000ms\n * - 800x800: 108000ms\n *\n * ~ 0.15ms per cell (or 6000 cells per second) with linear scaling\n */\nexport class WaveFunctionCollapse {\n  gridWidth: number;\n  gridHeight: number;\n  startTime = 0;\n  draw: () => void;\n  cells: Cell[];\n  uncollapsedCells: Cell[];\n  currentZone: Cell[];\n  lowestEntropyCellIndex = 0;\n\n  constructor(draw: (cells: Cell[]) => void, gridWidth: number, gridHeight = gridWidth) {\n    this.draw = () => draw(this.cells);\n    this.gridWidth = gridWidth;\n    this.gridHeight = gridHeight;\n    this.cells = [...new Array(gridWidth * gridHeight)].map(\n      (_, i) => new Cell(i % gridWidth, Math.floor(i / gridWidth)),\n    );\n    this.cells.forEach((cell) => cell.setNeighbors(this.cells, gridWidth, gridHeight));\n    this.setCurrentZone(0, 0);\n  }\n\n  setCurrentZone(x: number, y: number) {\n    this.currentZone = this.cells.filter(\n      (cell) => cell.x >= x && cell.x < x + ZONE_SIZE && cell.y >= y && cell.y < y + ZONE_SIZE,\n      [],\n    );\n    this.uncollapsedCells = this.currentZone.filter((cell) => !cell.isCollapsed);\n    shuffleArray(this.uncollapsedCells);\n  }\n\n  run = (drawSteps = false) => {\n    try {\n      console.log(\n        `Generating a ${this.gridWidth}x${this.gridHeight} grid (${\n          this.gridWidth * this.gridHeight\n        } cells) ...`,\n      );\n      this.startTime = new Date().getTime();\n      if (drawSteps) return this.runAsync();\n\n      for (let y = 0; y < this.gridHeight; y += ZONE_SIZE) {\n        for (let x = 0; x < this.gridWidth; x += ZONE_SIZE) {\n          this.runZone(x, y);\n        }\n      }\n      console.log(`Finished in ${new Date().getTime() - this.startTime}ms`);\n    } finally {\n      this.draw();\n    }\n  };\n\n  runAsync = async () => {\n    for (let y = 0; y < this.gridHeight; y += ZONE_SIZE) {\n      for (let x = 0; x < this.gridWidth; x += ZONE_SIZE) {\n        await this.runZoneAsync(x, y);\n      }\n    }\n    this.draw();\n    console.log(`Finished in ${new Date().getTime() - this.startTime}ms`);\n  };\n\n  runZone = (x: number, y: number) => {\n    this.setCurrentZone(x, y);\n    // choose random cell and collapse\n    const index = Math.floor(Math.random() * this.uncollapsedCells.length);\n    const cell = this.uncollapsedCells[index];\n    cell.collapse();\n\n    // Step through the zone until all of its cells are collapsed\n    this.step();\n  };\n\n  runZoneAsync = async (x: number, y: number) => {\n    this.setCurrentZone(x, y);\n    // choose random cell and collapse\n    const index = Math.floor(Math.random() * this.uncollapsedCells.length);\n    const cell = this.uncollapsedCells[index];\n    cell.collapse();\n\n    // Step through the zone until all of its cells are collapsed\n    await this.stepAsync();\n  };\n\n  step = () => {\n    const lowestEntropyCell = this.findLowestEntropyCell();\n\n    // There are no more cells to collapse\n    if (!lowestEntropyCell) return;\n\n    lowestEntropyCell.collapse();\n\n    this.step();\n  };\n\n  stepAsync = async () => {\n    const lowestEntropyCell = this.findLowestEntropyCell();\n\n    // There are no more cells to collapse\n    if (!lowestEntropyCell) return;\n\n    lowestEntropyCell.collapse();\n\n    this.draw();\n    await new Promise((resolve) => requestAnimationFrame(() => resolve(this.stepAsync())));\n  };\n\n  findLowestEntropyCell = () => {\n    this.uncollapsedCells = this.uncollapsedCells.filter((cell) => !cell.isCollapsed);\n\n    if (this.uncollapsedCells.length === 0) return undefined;\n\n    let lowestEntropyCell = this.uncollapsedCells[0];\n    this.lowestEntropyCellIndex = 0;\n\n    for (let i = 0; i < this.uncollapsedCells.length && lowestEntropyCell.entropy > 2; i++) {\n      const cell = this.uncollapsedCells[i];\n\n      if (cell.entropy < lowestEntropyCell.entropy) {\n        lowestEntropyCell = cell;\n        this.lowestEntropyCellIndex = i;\n      }\n    }\n\n    return lowestEntropyCell;\n  };\n}\n","import { CAVE_TILES, SocketTileName } from './Tile';\n\nexport class Cell {\n  x: number;\n  y: number;\n  domain: string[];\n  top?: Cell;\n  bottom?: Cell;\n  left?: Cell;\n  right?: Cell;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.domain = Object.keys(CAVE_TILES) as string[];\n  }\n\n  get isCollapsed() {\n    return this.domain.length === 1;\n  }\n\n  get entropy() {\n    return this.domain.length;\n  }\n\n  get neighbors(): Cell[] {\n    return [this.top, this.bottom, this.left, this.right].filter((neighbor) =>\n      Boolean(neighbor),\n    ) as Cell[];\n  }\n\n  getPotentialSockets(direction: 'top' | 'bottom' | 'left' | 'right') {\n    return this.domain.reduce<string[]>(\n      (acc, tile) => [...acc, CAVE_TILES[tile].sockets[direction]],\n      [],\n    );\n  }\n\n  setNeighbors = (cells: Cell[], gridWidth: number, gridHeight = gridWidth) => {\n    this.top = this.y === 0 ? undefined : cells[this.x + gridWidth * (this.y - 1)];\n    this.bottom = this.y === gridHeight - 1 ? undefined : cells[this.x + gridWidth * (this.y + 1)];\n    this.left = this.x === 0 ? undefined : cells[this.x - 1 + gridWidth * this.y];\n    this.right = this.x === gridWidth - 1 ? undefined : cells[this.x + 1 + gridWidth * this.y];\n  };\n\n  updateDomain = (forceUpdateNeighbors = false) => {\n    if (this.isCollapsed && !forceUpdateNeighbors) return;\n\n    const initialDomainSize = this.domain.length;\n\n    this.domain = this.domain.filter((tileName) => {\n      const tile = CAVE_TILES[tileName as SocketTileName];\n\n      if (this.top && !this.top?.getPotentialSockets('bottom').includes(tile.sockets.top))\n        return false;\n      if (this.bottom && !this.bottom?.getPotentialSockets('top').includes(tile.sockets.bottom))\n        return false;\n      if (this.left && !this.left?.getPotentialSockets('right').includes(tile.sockets.left))\n        return false;\n      if (this.right && !this.right?.getPotentialSockets('left').includes(tile.sockets.right))\n        return false;\n      return true;\n    });\n\n    if (this.domain.length === 0) throw new Error('Cell domain is empty!');\n\n    // update neighbors if this cell changed\n    if (forceUpdateNeighbors || this.domain.length !== initialDomainSize)\n      this.neighbors.forEach((neighbor) => neighbor.updateDomain());\n  };\n\n  collapse = () => {\n    // Choose a random tile from the domain, based on the weight of each tile\n    const randomNumber = Math.random();\n    const totalWeight = this.domain.reduce((sum, tile) => sum + CAVE_TILES[tile].weight, 0);\n    let chosenTile: string | undefined = undefined;\n    let runningSum = 0;\n\n    this.domain.forEach((tile) => {\n      if (chosenTile) return;\n      runningSum += CAVE_TILES[tile].weight;\n      if (randomNumber < runningSum / totalWeight) chosenTile = tile;\n    });\n    this.domain = [chosenTile ?? this.domain[0]];\n\n    // Update neighbors\n    this.updateDomain(true);\n  };\n}\n"],"names":[],"version":3,"file":"index.93f24d7e.js.map"}